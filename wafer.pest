WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ ("//" ~ (!"\n" ~ ANY)*) | ("/*" ~ (!"*/" ~ ANY)* ~ "*/") }

module = { SOI ~ (function | external_function)* ~ EOI }

arithmetic_operation = _{ "+" | "-" | "*" | "/" }
comparison_operation = _{ "==" | "!=" | "<=" | "<" | ">=" | ">" }
logical_operation = _{ "and" | "or" }
binary_operation = { arithmetic_operation | comparison_operation | logical_operation }

number = @{ ASCII_DIGIT+ }
identifier = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }
array_index = { identifier ~ "[" ~ expression ~ "]" }

args = { "(" ~ (expression ~ ("," ~ expression)*)? ~ ")" }

variable_assignment_expression = { identifier ~ ":=" ~ expression }
array_assignment_expression = { array_index ~ ":=" ~ expression }
assignment_expression = _{ variable_assignment_expression | array_assignment_expression }
binary_expression = { primary_expression ~ (binary_operation ~ primary_expression)* }
call_expression = { identifier ~ args }
if_expression = { "if" ~ expression ~ block_expression ~ "else" ~ (block_expression | if_expression) }
primary_expression = _{
    ("(" ~ expression ~ ")") |
    number |
    if_expression |
    call_expression |
    array_index |
    identifier
}
expression = _{ assignment_expression | binary_expression }

block_statements = { "{" ~ (statement)* ~ "}" }
let_statement = { "let" ~ identifier ~ "=" ~ expression ~ ";" }
if_statement = { "if" ~ expression ~ block_statements ~ ("else" ~ (block_statements | if_statement))? }
while_statement = { "while" ~ expression ~ block_statements }
expression_statement = { expression ~ ";" }
statement = _{ let_statement | if_statement | while_statement | expression_statement }

params = { "(" ~ (identifier ~ ("," ~ identifier)*)? ~ ")" }
block_expression = { "{" ~ (statement)* ~ expression ~ "}" }
function = { "func" ~ identifier ~ params ~ block_expression }

external_function = { "extern" ~ "func" ~ identifier ~ params ~ ";" }
